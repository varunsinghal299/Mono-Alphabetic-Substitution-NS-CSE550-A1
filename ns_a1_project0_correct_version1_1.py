# -*- coding: utf-8 -*-
"""NS_A1_Project0_Correct_version1.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r63HJAEGkSnGeqr7C1iGpCOzes8c8jsi
"""

#import libraries
import string
import random
import zlib 
from itertools import permutations


# Encrption Message
def encrptMessage(plaintext, key):

  table1 = {'AA': 0,
            'AB': 1,
            'AC': 2,
            'BA': 3,
            'BB': 4,
            'BC': 5,
            'CA': 6,
            'CB': 7,
            'CC': 8}

  table2 = { '0' :'AA',
             '1' :'AB',
             '2' :'AC',
             '3' :'BA',
             '4' :'BB',
             '5' :'BC',
             '6' :'CA',
             '7' :'CB',
             '8' :'CC'}

            #  key = "345678012"

  text = plaintext

  # initialize cipher
  cipher = ""

  # Iterate over index
  for p in range(0, len(text),2):
    s = plaintext[p]+plaintext[p+1]
    
    value = table1[s]
    #print(value)
    value =  key[value]
    #print(value)
    value = table2[value]
    #print(value)
    cipher = cipher + value
    
  cipher = cipher

  #return ciper  
  return cipher

# Decrption Message
def decrptMessage(ciphertext, key):

  table1 = {'AA': 0,
            'AB': 1,
            'AC': 2,
            'BA': 3,
            'BB': 4,
            'BC': 5,
            'CA': 6,
            'CB': 7,
            'CC': 8}

  table2 = { '0' :'AA',
             '1' :'AB',
             '2' :'AC',
             '3' :'BA',
             '4' :'BB',
             '5' :'BC',
             '6' :'CA',
             '7' :'CB',
             '8' :'CC'}

  text = ciphertext       
  
  # initialize cipher
  plaintext = ""

  # Iterate over index
  for p in range(0, len(text),2):
    s = ciphertext[p] + ciphertext[p+1]
    
    value = table1[s]

    value = str(value)
    for i in range(0, len(key)):
      if(key[i] == value):
        value = i
        break
        
    value = str(value)
    value = table2[value]
    plaintext = plaintext+value

  plaintext = plaintext
  return plaintext



#hash function which return checksum.
# def hash_Function(plaintext):
#   plaintext_bytes = bytes(plaintext, 'ascii')
#   checksum = zlib.crc32(plaintext_bytes)
#   checksum = str(checksum)
#   return checksum


#hash function
def hash_Function(plaintext):
    i=0
    checksum = ""
    while i<8:
        sum = 0
        j=0
        prev = 0
        while j<len(plaintext):
            if(j%8==i):
                sum = sum + (ord(plaintext[j]))
            j=j+1
        checksum = checksum + chr(sum%3 + ord('A'))
        i=i+1
    plaintext = plaintext+ checksum
    return checksum




#check the validity of plaintext which is decrypted from cipher text.
def checkValidity(c_plaintext):  
    l1 = len(c_plaintext)
    l2 = len(c_plaintext) - 8
    list1 = c_plaintext[0 : l2]
    list2 = c_plaintext[l2 : l1]
    
    c_checksum = hash_Function(list1)
    if(c_checksum == list2):
      return 1
    else:
      return 0


#Generate all permutation
def allPermutations(str):
    permutations_list = []
    character_sequences = permutations(str)
    for sequence in character_sequences:
        string_permutation = "".join(sequence)
        permutations_list.append(string_permutation)
    return permutations_list



def Brute_force_attack(list_of_ciphertext):
  print("Do brute Force")

  key = "012345678"
  permutations_list = allPermutations(key)
  
  for cipher in list_of_ciphertext:
    for current_key in permutations_list:
      decrypt_plaintext = decrptMessage(cipher, current_key)
      valid = checkValidity(decrypt_plaintext)
                
      if(valid == 1 ):
        print("Cipher: "+ cipher + "  Key: " + current_key)
        break


# our Main function start from here
def main():
  print("Hello World!")
  
  # Lets take 5 plaintext
  list_of_plaintext = ["AAABACBABBBCCACBCC",
                       "AAABACCACBCCBABBBC",
                       "CACBCCBABBBCAAABAC",
                       "CCCBCAAAABACBABCBB",
                       "BCBBBAAAABACCACCCB"]
  # Lets take 5 cipertext
  list_of_ciphertext = []

  # initilaize one key:
  #cpyto_key   = ["AA", "AB", "AC", "BA", "BB", "BC", "CA", "CB", "CC"]
  #cpyto_value = ["CA", "BA", "AA", "CB", "BB", "AB", "CC", "BC", "AC"]

  #key = {'AA': "CA",
        #  'AB': "BA",
        #  'AC': "AA",
        #  'BA': "CB",
        #  'BB': "BB",
        #  'BC': "AB",
        #  'CA': "CC",
        #  'CB': "BC",
        #  'CC': "AC"}


  key = "012345876"  
# key = "345678012"  #its means #key = {'AA': "BA",
                                     #  'AB': "BB",
                                     #  'AC': "BC",
                                     #  'BA': "CA",
                                     #  'BB': "CB",
                                     #  'BC': "CC",
                                     #  'CA': "AA",
                                     #  'CB': "AB",
                                     #  'CC': "AC"}
  # Rank = {'AA': 0,
  #         'AB': 1,
  #         'AC': 2,
  #         'BA': 3,
  #         'BB': 4,
  #         'BC': 5,
  #         'CA': 6,
  #         'CB': 7,
  #         'CC': 8}                                   

  

  print("Original Plaintext : \n")
  print(*list_of_plaintext, sep = "\n")
  print("\n")

  # add checksum in every plaintext throught which we can find wheather text is recognizable while decreption 
  for i in range(len(list_of_plaintext)):
    crc = hash_Function(list_of_plaintext[i])
    list_of_plaintext[i] = list_of_plaintext[i]+crc

  print("Plaintext with add checksum : \n")
  print(*list_of_plaintext, sep = "\n")
  print("\n")


  print("Hash key used for Encryption : \n")
  # code to write key
  
  # encryption
  for p in list_of_plaintext:
    ciper = encrptMessage(p, key)
    list_of_ciphertext.append(ciper)
  

  print("Ciphertext after Encryption : \n")
  print(*list_of_ciphertext, sep = "\n")
  print("\n")


  # Decryption 
  list_of_decryp_plaintext = []

  for cipher in list_of_ciphertext:
    c_plain = decrptMessage(cipher, key)
    list_of_decryp_plaintext.append(c_plain)


  print("Plaintext after Decryption : \n")
  print(*list_of_decryp_plaintext, sep = "\n")
  print("\n")
  
  # temp1 = list_of_decryp_plaintext[0]
  # l1 = len(temp1)
  # l2 = len(temp1) - 8
  # list1 = temp1[0 : l2]
  # list2 = temp1[l2 : l1]

  # print(l1)
  # print(l2)
  
  # print(list2)

  # Brute Force Attack
  print("Decrypt on 9! different keys to find list_of_plaintext given list_of_cipher")
  Brute_force_attack(list_of_ciphertext)

  #ThankYou

if __name__ == "__main__":
    main()